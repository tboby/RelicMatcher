@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.SignalR.Client
@using RelicMatcher.Shared
@inject NavigationManager NavigationManager
@implements IDisposable
@page "/relic"
<h3>Relic</h3>


<h1>Relic</h1>

<p>Current relic: @model.RelicType</p>

<EditForm Model="model" OnValidSubmit="Queue">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputSelect @bind-Value="model.RelicType">
        @foreach (var cnt in Relics)
        {
            <option value="@cnt">@(Enum.GetName(typeof(RelicType), cnt))</option>
        }
    </InputSelect>

    <InputText @bind-Value="model.User"/>

    <button type="submit" disabled="@(!IsConnected)">Queue</button>
</EditForm>

<dl id="relicList">
    @foreach (var relic in currentQueue)
    {
        <dt>@relic.User</dt>
        <dd>@relic.RelicType</dd>
    }
</dl>


@code {
    private RelicQueueItem model { get; set; } = new RelicQueueItem();
    private IEnumerable<RelicType> Relics => new List<RelicType> { RelicType.A1, RelicType.A2, RelicType.A3 };

    private HubConnection hubConnection;
    private List<RelicQueueItem> currentQueue = new List<RelicQueueItem>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/relicHub"))
            .Build();

        hubConnection.On<List<RelicQueueItem>>("ReceiveRelicQueue", (relics) =>
        {
            currentQueue = relics;
            StateHasChanged();
        });



        await hubConnection.StartAsync();
    }

    Task Queue() =>
        hubConnection.SendAsync("QueueRelic", model);
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}
