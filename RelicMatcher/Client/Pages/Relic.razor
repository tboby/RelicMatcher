@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using System.Timers
@using BlazorBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using RelicMatcher.Client.ViewModels
@using RelicMatcher.Shared
@inject NavigationManager NavigationManager
@inject ILoggerProvider LoggerProvider
@inject ILogger<Relic> Logger
@inject UserStateService UserStateService
@inject HttpClient Http
@implements IDisposable
@page "/relic"
<h1>Relic</h1>

@if (RelicQueueStatus == RelicQueueStatus.None || RelicQueueStatus == RelicQueueStatus.Queued)
{
    if (RelicQueueStatus == RelicQueueStatus.Queued)
    {
<p>Currently queued for relic: @QueuedRelic.DisplayName</p>
    }
    else if (IsConnected == false)
    {
<p>Connecting...</p>
    }
    else if (RelicQueueStatus == RelicQueueStatus.None)
    {
<p>Not queued</p>
    }
    <EditForm Model="model" OnValidSubmit="Queue">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>
               
                Name: @UserSettings?.DisplayName
            </label>
        <input type="hidden" @bind="model.UserDisplayName"/>
        </div>

        <div class="form-group">

            <label>
                Relic:
                <InputSelect @bind-Value="model.RelicUniqueName" disabled="@(!CanEditQueue)">
                    <option value="">Select relic</option>
                    @foreach (var cnt in FilteredRelics)
                    {
                        <option value="@cnt.UniqueName">@cnt.DisplayName</option>
                    }
                </InputSelect>
                <label>
                    Include Vaulted relics:
                    <input type="checkbox" @bind="IncludeVaultedRelics" disabled="@(!CanEditQueue)" />
                </label>

            </label>
        </div>
        @if (SelectedRelic != null)
        {
            <dl>
                @foreach (var reward in SelectedRelic.Drops)
                {
                    <dt>@reward.Rarity</dt>
                    <dd>@reward.Name</dd>
                }
            </dl>
        }

        <button type="submit" disabled="@(!CanEditQueue)">Queue</button>
        @if (RelicQueueStatus == RelicQueueStatus.Queued)
        {
            <button type="button" @onclick="DeQueue" disabled="@(!IsConnected)">Stop queueing</button>
        }
    </EditForm>
    <h5>Current queuing users</h5>

<dl id="relicList">
    @foreach (var relic in currentQueue)
        {
    <dt>@relic.User</dt>
    <dd>@relic.RelicDisplayName</dd>
        }
</dl>
}
else if (RelicQueueStatus == RelicQueueStatus.PartyFound)
{
<h3>Party found!</h3>
<p>Relic: @CurrentParty.RelicType.DisplayName</p>
@TimeRemaining.Seconds
<h4>Members:</h4>
<ul>
    @foreach (var member in CurrentParty.Members)
        {
    <li>@member.DisplayName: @member.Accepted</li>
        }
</ul>
<button @onclick="Accept" disabled="@(!IsConnected)">Accept</button>


}
else if (RelicQueueStatus == RelicQueueStatus.Done)
{
<h3>Party complete!</h3>
<p>Relic: @CurrentParty.RelicType.DisplayName</p>
<h4>Members:</h4>
<ul>
    @foreach (var member in CurrentParty.Members)
        {
    <li>/inv @member.DisplayName</li>
        }
</ul>
<button @onclick="Reset" disabled="@(!IsConnected)">Reset</button>
}


@code {
    private UserRelicQueueState UserRelicQueueState { get; set; } = UserRelicQueueState.DefaultState;
    private RelicQueueStatus RelicQueueStatus => UserRelicQueueState.RelicQueueStatus;
    private RelicType? QueuedRelic => UserRelicQueueState.RelicType;
    private Party? CurrentParty => UserRelicQueueState.Party;
    //private RelicQueueState RelicQueueState { get; set; } = RelicQueueState.None;
    private RelicQueueInput model { get; set; } = new RelicQueueInput();
    private IEnumerable<RelicType> Relics { get; set; } = new List<RelicType>();
    private IEnumerable<RelicType> FilteredRelics => Relics.Where(x => IncludeVaultedRelics || !x.Vaulted);

    private RelicType? SelectedRelic => Relics.FirstOrDefault(x => x.UniqueName == model.RelicUniqueName);

    private HubConnection hubConnection;
    private List<RelicQueueDisplay> currentQueue = new List<RelicQueueDisplay>();
    private bool IncludeVaultedRelics = false;

    private TimeSpan TimeRemaining => CurrentParty.DeadLine - DateTime.Now;

    private bool Initialized = false;
    private UserSettings UserSettings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/relicHub"), opts => { })

            .ConfigureLogging(logging => logging.AddProvider(LoggerProvider))
            .Build();
        UserSettings = await UserStateService.GetUserSettings();
        if (UserSettings == null)
        {
            NavigationManager.NavigateTo("/settings/firstTime", true);
        }
        else
        {
            model.UserDisplayName = UserSettings.DisplayName;
        }

        UserRelicQueueState = UserRelicQueueState.DefaultState;
        Relics = await Http.GetFromJsonAsync<List<RelicType>>("api/RelicData");

        var userGuid = await UserStateService.GetOrCreateUserSession();

        hubConnection.On<List<RelicQueueDisplay>>("ReceiveRelicQueue", (relics) =>
        {
            currentQueue = relics;
            StateHasChanged();
        });

        hubConnection.On<UserRelicQueueState>("ReceiveUserState", (userState) =>
        {
            if (!Initialized)
            {
                model.UserDisplayName ??= userState?.UserDisplayName;
                model.RelicUniqueName ??= userState?.RelicType?.UniqueName;
                Initialized = true;
            }
            UserRelicQueueState = userState;
            SetupTimer();
            StateHasChanged();
        });

        DeadlineTimer.Interval = 1000;
        DeadlineTimer.Elapsed += OnTimedEvent;

        await hubConnection.StartAsync();
        await ConnectUser(userGuid);

    }

    Task ConnectUser(Guid sessionUser) =>
        hubConnection.SendAsync("ConnectUser", sessionUser);

    Task Queue()
    {
        model.UserDisplayName = UserSettings.DisplayName;
        return hubConnection.SendAsync("QueueRelic", model);
    }

    Task DeQueue() =>
        hubConnection.SendAsync("DeQueueRelic");

    Task Accept() =>
        hubConnection.SendAsync("AcceptAssignment");

    Task Reset() =>
        hubConnection.SendAsync("Reset");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public bool CanEditQueue =>
        IsConnected && RelicQueueStatus == RelicQueueStatus.None;

    private readonly Timer DeadlineTimer = new Timer();

    private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        StateHasChanged();
    }

    public void SetupTimer()
    {
        if (RelicQueueStatus == RelicQueueStatus.PartyFound)
        {
            DeadlineTimer.Start();
        }
        else
        {
            DeadlineTimer.Stop();
        }
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}
